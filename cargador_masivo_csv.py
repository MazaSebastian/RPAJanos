#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CARGADOR MASIVO CSV - SISTEMA INDEPENDIENTE
==========================================

Sistema independiente para cargar coordinaciones masivamente
desde archivo CSV al software COORDIS.

Caracter√≠sticas:
- Lee CSV con datos de eventos
- Valida datos antes de procesar
- Carga masivamente en COORDIS
- Reporta resultados detallados
- Manejo robusto de errores

Autor: Sistema RPA Janos
Fecha: 05/10/2025
"""

import pandas as pd
import time
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

class CargadorMasivoCSV:
    def __init__(self, csv_file="todos_los_eventos_extraidos.csv"):
        self.csv_file = csv_file
        self.driver = None
        self.wait = None
        self.eventos_procesados = 0
        self.eventos_exitosos = 0
        self.eventos_fallidos = 0
        self.errores_detallados = []
        
    def configurar_driver(self):
        """Configurar el driver de Chrome"""
        print("üîß Configurando driver de Chrome...")
        
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        
        try:
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.wait = WebDriverWait(self.driver, 20)
            print("‚úÖ Driver configurado correctamente")
            return True
        except Exception as e:
            print(f"‚ùå Error configurando driver: {e}")
            return False
    
    def cargar_csv(self):
        """Cargar y validar el archivo CSV"""
        print(f"üìä Cargando archivo CSV: {self.csv_file}")
        
        try:
            if not os.path.exists(self.csv_file):
                print(f"‚ùå Archivo CSV no encontrado: {self.csv_file}")
                return None
            
            # Cargar CSV
            df = pd.read_csv(self.csv_file)
            print(f"‚úÖ CSV cargado: {len(df)} eventos encontrados")
            
            # Validar columnas requeridas
            columnas_requeridas = [
                'homenajeada', 'codigo_evento', 'tipo_evento', 'fecha_evento',
                'salon', 'cliente', 'celular', 'celular_2', 'tipo_pack'
            ]
            
            columnas_faltantes = [col for col in columnas_requeridas if col not in df.columns]
            if columnas_faltantes:
                print(f"‚ö†Ô∏è Columnas faltantes en CSV: {columnas_faltantes}")
                return None
            
            print("‚úÖ Validaci√≥n de CSV exitosa")
            return df
            
        except Exception as e:
            print(f"‚ùå Error cargando CSV: {e}")
            return None
    
    def navegar_a_coordis(self):
        """Navegar al software COORDIS"""
        print("üåê Navegando al software COORDIS...")
        
        try:
            self.driver.get("http://localhost:3001")
            time.sleep(5)
            
            # Cerrar iframe de desarrollo si existe
            try:
                iframe = self.driver.find_element(By.ID, "webpack-dev-server-client-overlay")
                self.driver.execute_script("arguments[0].style.display = 'none';", iframe)
                print("‚úÖ Iframe de desarrollo cerrado")
            except:
                pass
            
            if "Jano's" in self.driver.title or "Coordinaciones" in self.driver.title:
                print("‚úÖ Acceso exitoso al software COORDIS")
                return True
            else:
                print("‚ùå No se pudo acceder al software COORDIS")
                return False
                
        except Exception as e:
            print(f"‚ùå Error navegando a COORDIS: {e}")
            return False
    
    def hacer_clic_nueva_coordinacion(self):
        """Hacer clic en el bot√≥n 'NUEVA COORDINACI√ìN'"""
        print("üñ±Ô∏è Buscando bot√≥n 'NUEVA COORDINACI√ìN'...")
        
        try:
            boton_selectors = [
                "//button[contains(text(), 'Nueva Coordinaci√≥n')]",
                "//a[contains(text(), 'Nueva Coordinaci√≥n')]",
                "//a[contains(@href, '/coordinations/new')]"
            ]
            
            for selector in boton_selectors:
                try:
                    boton = self.wait.until(EC.element_to_be_clickable((By.XPATH, selector)))
                    boton.click()
                    print("‚úÖ Bot√≥n 'NUEVA COORDINACI√ìN' encontrado y clickeado")
                    time.sleep(3)
                    return True
                except:
                    continue
            
            print("‚ùå No se pudo encontrar el bot√≥n 'NUEVA COORDINACI√ìN'")
            return False
            
        except Exception as e:
            print(f"‚ùå Error haciendo clic en el bot√≥n: {e}")
            return False
    
    def llenar_campo(self, campo, valor):
        """Llenar un campo del formulario"""
        try:
            # Selectores optimizados
            selectors = {
                'title': ["input[placeholder='T√≠tulo de la coordinaci√≥n']"],
                'event_date': ["input[type='date']"],
                'client_name': ["input[placeholder='Nombre completo del cliente']"],
                'celular': ["input[placeholder='541157526518']"],
                'celular_2': ["input[placeholder='1157526518']"]
            }
            
            if campo in selectors:
                for selector in selectors[campo]:
                    try:
                        elemento = self.driver.find_element(By.CSS_SELECTOR, selector)
                        elemento.clear()
                        elemento.send_keys(str(valor))
                        return True
                    except:
                        continue
            
            return False
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è Error llenando campo '{campo}': {e}")
            return False
    
    def llenar_formulario_evento(self, evento):
        """Llenar el formulario para un evento espec√≠fico"""
        print(f"üìù Procesando evento {self.eventos_procesados + 1}: {evento.get('codigo_evento', 'N/A')}")
        
        try:
            # Campos esenciales
            campos_esenciales = {
                'title': f"{evento.get('tipo_evento', '')} de {evento.get('homenajeada', '')}",
                'event_date': self.formatear_fecha(evento.get('fecha_evento', '')),
                'client_name': evento.get('cliente', ''),
                'celular': evento.get('celular', ''),
                'celular_2': evento.get('celular_2', '')
            }
            
            # Llenar campos esenciales
            for campo, valor in campos_esenciales.items():
                if valor and valor != '':
                    try:
                        self.llenar_campo(campo, valor)
                        time.sleep(0.5)
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è Error llenando campo '{campo}': {e}")
                        continue
                else:
                    print(f"  ‚è≠Ô∏è Saltando campo '{campo}' (sin valor v√°lido)")
            
            return True
            
        except Exception as e:
            print(f"  ‚ùå Error llenando formulario: {e}")
            return False
    
    def formatear_fecha(self, fecha_str):
        """Formatear fecha para el formulario"""
        try:
            if pd.isna(fecha_str) or fecha_str == '':
                return ''
            
            # Convertir a datetime y formatear como YYYY-MM-DD
            fecha = pd.to_datetime(fecha_str)
            return fecha.strftime('%Y-%m-%d')
        except:
            return ''
    
    def guardar_coordinacion(self):
        """Guardar la coordinaci√≥n"""
        try:
            # Buscar bot√≥n de guardar
            save_selectors = [
                "button[type='submit']",
                "button:contains('Guardar')",
                "button:contains('Crear')",
                "button:contains('Save')"
            ]
            
            for selector in save_selectors:
                try:
                    save_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    # Usar JavaScript para hacer clic (evita problemas de overlay)
                    self.driver.execute_script("arguments[0].click();", save_button)
                    print("‚úÖ Coordinaci√≥n guardada exitosamente")
                    time.sleep(2)
                    return True
                except:
                    continue
            
            print("‚ùå No se pudo encontrar el bot√≥n de guardar")
            return False
            
        except Exception as e:
            print(f"‚ùå Error guardando coordinaci√≥n: {e}")
            return False
    
    def procesar_evento(self, evento):
        """Procesar un evento individual"""
        try:
            # Hacer clic en "NUEVA COORDINACI√ìN"
            if not self.hacer_clic_nueva_coordinacion():
                return False
            
            # Llenar formulario
            if not self.llenar_formulario_evento(evento):
                return False
            
            # Guardar coordinaci√≥n
            if not self.guardar_coordinacion():
                return False
            
            self.eventos_exitosos += 1
            return True
            
        except Exception as e:
            print(f"‚ùå Error procesando evento: {e}")
            self.eventos_fallidos += 1
            self.errores_detallados.append({
                'evento': evento.get('codigo_evento', 'N/A'),
                'error': str(e)
            })
            return False
    
    def procesar_csv_masivamente(self):
        """Procesar todo el CSV masivamente"""
        print("üöÄ Iniciando carga masiva desde CSV...")
        
        # Cargar CSV
        df = self.cargar_csv()
        if df is None:
            return False
        
        # Navegar a COORDIS
        if not self.navegar_a_coordis():
            return False
        
        print(f"\nüìã Procesando {len(df)} eventos...")
        print("=" * 50)
        
        # Procesar cada evento
        for index, evento in df.iterrows():
            self.eventos_procesados += 1
            
            print(f"\nüîÑ EVENTO {self.eventos_procesados}/{len(df)}")
            print(f"   C√≥digo: {evento.get('codigo_evento', 'N/A')}")
            print(f"   Cliente: {evento.get('cliente', 'N/A')}")
            print(f"   Fecha: {evento.get('fecha_evento', 'N/A')}")
            
            if self.procesar_evento(evento):
                print(f"‚úÖ Evento {self.eventos_procesados} procesado exitosamente")
            else:
                print(f"‚ùå Evento {self.eventos_procesados} fall√≥")
                self.eventos_fallidos += 1
        
        return True
    
    def generar_reporte(self):
        """Generar reporte final"""
        print("\nüìä REPORTE FINAL:")
        print("=" * 50)
        print(f"Total eventos: {self.eventos_procesados}")
        print(f"Exitosos: {self.eventos_exitosos}")
        print(f"Fallidos: {self.eventos_fallidos}")
        
        if self.eventos_procesados > 0:
            tasa_exito = (self.eventos_exitosos / self.eventos_procesados) * 100
            print(f"Tasa de √©xito: {tasa_exito:.1f}%")
        
        if self.errores_detallados:
            print(f"\n‚ùå ERRORES DETALLADOS:")
            for error in self.errores_detallados:
                print(f"  - Evento {error['evento']}: {error['error']}")
    
    def cerrar_driver(self):
        """Cerrar el driver"""
        if self.driver:
            self.driver.quit()
            print("üîí Driver cerrado")

def main():
    """Funci√≥n principal"""
    print("üöÄ CARGADOR MASIVO CSV - SISTEMA INDEPENDIENTE")
    print("=" * 60)
    print("üìã Caracter√≠sticas:")
    print("   ‚úÖ Lee CSV con datos de eventos")
    print("   ‚úÖ Valida datos antes de procesar")
    print("   ‚úÖ Carga masivamente en COORDIS")
    print("   ‚úÖ Reporta resultados detallados")
    print("   ‚úÖ Manejo robusto de errores")
    print("=" * 60)
    
    cargador = CargadorMasivoCSV()
    
    try:
        # Configurar driver
        if not cargador.configurar_driver():
            return False
        
        # Procesar CSV masivamente
        if not cargador.procesar_csv_masivamente():
            return False
        
        # Generar reporte
        cargador.generar_reporte()
        
        print("\nüéâ CARGA MASIVA COMPLETADA")
        print("‚úÖ Sistema independiente funcionando correctamente")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en la carga masiva: {e}")
        return False
    
    finally:
        cargador.cerrar_driver()

if __name__ == "__main__":
    main()


